package com.piotr.euler

object Task2 {

  case class FibResult(prev: Int, cur: Int)


  /**
   * Problem 2
   *
   * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
   * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
   * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
   *
   * @param args
   */
  def main(args: Array[String]): Unit = {
    val resultIterative = (2 to 11).foldLeft("Fib iterative:")((sum, it) => sum + " " + fibIterative(it))
    println(resultIterative)

    val resultRecursive = (2 to 11).foldLeft("Fib recursive:")((sum, it) => sum + " " + fibRecursive(it))
    println(resultRecursive)

    val result: Int = fibsRecursiveUsingLazyList()
      .take(maxFibValue())
      .foldLeft(0) {
        (sum, it) => {
          val fibValue = fibIterative(it)
          if (fibValue % 2 == 0) {
            return sum + fibValue
          } else {
            return sum
          }
        }
      }

    println(result)

  }


  def maxFibValue(): Int = {
    LazyList
      .from(1)
      .takeWhile(fibIterative(_) <= 4_000_000)
      .last
  }

  def fibIterative(n: Int): Int = {
    if (n == 0) return 0
    (1 until n).foldLeft(FibResult(0, 1)) {
      (agg, it) => FibResult(agg.cur, agg.prev + agg.cur)
    }.cur
  }

  def fibRecursive(n: Int): Int = {
    if (n == 0) return 0
    if (n < 2) return 1
    fibRecursive(n - 2) + fibRecursive(n - 1)
  }

  def fibsRecursiveUsingLazyList(current: Int = 0, next: Int = 1): LazyList[Int] =
    LazyList.cons(current, fibsRecursiveUsingLazyList(next, current + next))

}
